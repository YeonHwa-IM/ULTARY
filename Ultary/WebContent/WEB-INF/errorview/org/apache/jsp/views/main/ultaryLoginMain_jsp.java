/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.53
 * Generated at: 2020-04-22 12:52:08 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.main;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import member.model.vo.Member;
import java.net.URLEncoder;
import java.security.SecureRandom;
import java.math.BigInteger;

public final class ultaryLoginMain_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.security.SecureRandom");
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("member.model.vo.Member");
    _jspx_imports_classes.add("java.math.BigInteger");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write(" \r\n");
      out.write("<!--네이버 로그인 전용 임포트  -->    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");

	Member loginMember = (Member)session.getAttribute("loginUser");
	System.out.println(loginMember); //null이면 로그인을 안한것 null이 아니면 로그인 한것
	String msg = (String)request.getAttribute("msg"); // 그리고 나서 서버에 나타나게 해줘야함
	

      out.write(" \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>울타리 로그인</title>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src= \"");
      out.print( request.getContextPath() );
      out.write("/js/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- user style -->\r\n");
      out.write("<link rel= \"stylesheet\" href=\"");
      out.print( request.getContextPath() );
      out.write("/css/ultaryLogin.css\" type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<!----해더 시작--------------------------------------------------------------------->\r\n");
      out.write("<!-- 시멘틱 태그 최대한 활용하기 -->\r\n");
      out.write("\t<header>\r\n");
      out.write("\t\t\t<a href='");
      out.print( request.getContextPath() );
      out.write("/views/main/main.jsp' target=\"_self\">\r\n");
      out.write("\t\t\t<img id=\"logo\" src=\"");
      out.print( request.getContextPath() );
      out.write("/image/logo.png\" width=\"120px\" height=\"90px\" /></a>\r\n");
      out.write("\t</header>\r\n");
      out.write("\t\r\n");
      out.write("<!----해더 끝--------------------------------------------------------------------->\r\n");
      out.write("<!-- nav 생략 -->\r\n");
      out.write("\r\n");
      out.write("<!----테이블 섹션  시작--------------------------------------------------------------------->\t\t\t\r\n");
      out.write("\t<section>\r\n");
      out.write("\t\t\t<form id=\"loginForm\" action=\"");
      out.print( request.getContextPath() );
      out.write("/login.mem\" method=\"post\" onsubmit=\"return loginvalidate();\">\r\n");
      out.write("\t\t\t\t<div class=\"tableArea\">\r\n");
      out.write("\t\t\t\t\t<h1 align=\"center\">로그인</h1>\r\n");
      out.write("\t\t\t\t\t\t<hr width=50% color=\"white\">\r\n");
      out.write("\t\t\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t\t\t\t<table>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<td><input type=\"text\" id=\"memberid\" name=\"memberid\" class=\"input_login\" placeholder=\"아이디\" autofocus required></td>\r\n");
      out.write("\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<td><input type=\"password\" id=\"password\" name=\"password\" class=\"input_login\" placeholder=\"비밀번호\" required></td>\r\n");
      out.write("\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<td><button type=submit id=\"loginBtn_normal\" class=\"loginBtn\" value=\"로그인\">로그인</button></td>\r\n");
      out.write("\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("<!----네이버 로그인 연동 시작--------------------------------------------------------------------->\r\n");
      out.write("\t\t\t\t\t\t\t ");

							 	String clientId = "I5f2j4CStj0Q0BPbHYAM";//애플리케이션 클라이언트 아이디값";
							    String redirectURI = URLEncoder.encode("http://localhost:9022/ULTARY/views/main/callback.jsp", "UTF-8");
							    SecureRandom random = new SecureRandom();
							    String state = new BigInteger(130, random).toString();
							    String apiURL = "https://nid.naver.com/oauth2.0/authorize?response_type=code";
							    apiURL += "&client_id=" + clientId;
							    apiURL += "&redirect_uri=" + redirectURI;
							    apiURL += "&state=" + state;
							    session.setAttribute("state", state);
							 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t\t\t<!-- \t<button type=button id=\"loginBtn_naver\" class=\"loginBtn\" onclick=\"location.href='/controller/naverlogin.do';\" >네이버 계정으로 로그인</button> -->\r\n");
      out.write("\t\t\t\t<!--네이버 계정으로 로그인 버튼  --><a href=\"");
      out.print(apiURL);
      out.write("\"><img height=\"30px\" width=\"200px\" class=\"loginBtn\" src=\"");
      out.print( request.getContextPath() );
      out.write("/image/네이버 아이디로 로그인_완성형_White.PNG\"/></a>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("<!----네이버 로그인 연동 끝--------------------------------------------------------------------->\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t\t\t\t<hr width=50% color=\"white\">\r\n");
      out.write("\t\t\t\t\t\t<br>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t</section>\r\n");
      out.write("<!---- 풋터 시작 --------------------------------------------------------------------->\t\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<footer>\r\n");
      out.write("\t\t<table id=\"footer\">\r\n");
      out.write("\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><div class=\"footer_link\" onclick=\"goNotice();\">공지사항</div></td>\r\n");
      out.write("\t\t\t\t\t<td>|</td>\r\n");
      out.write("\t\t\t\t\t<td><div class=\"footer_link\" onclick=\"gofindId();\">아이디 찾기</div></td>\r\n");
      out.write("\t\t\t\t\t<td>|</td>\r\n");
      out.write("\t\t\t\t\t<td><div class=\"footer_link\" onclick=\"gofindPwd();\">비밀번호 찾기</div></td>\r\n");
      out.write("\t\t\t\t\t<td>|</td>\r\n");
      out.write("\t\t\t\t\t<td><div class=\"footer_link\" onclick=\"gomemberJoin();\">회원가입</div></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</tbody>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</footer>\r\n");
      out.write("\t\r\n");
      out.write("<!---- 풋터 끝 --------------------------------------------------------------------->\t\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction loginvalidate(){\r\n");
      out.write("\t\t\tif($('#userId').val().trim().length==0){\r\n");
      out.write("\t\t\t\talert('아이디를 입력해주세요');\r\n");
      out.write("\t\t\t\t$('#userId').focus();\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tif($('#userPwd').val().trim().length==0){\r\n");
      out.write("\t\t\t\talert('비밀번호를 입력해주세요.');\r\n");
      out.write("\t\t\t\t$('#userPwd').focus();\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tvar userId = $('#memberid');\r\n");
      out.write("\t\t\tvar password = $('#password');\r\n");
      out.write("\t\t\tif(userId != null && password != null){\r\n");
      out.write("\t\t\t\talert(\"가입하지 않은 아이디이거나, 잘못된 비밀번호입니다.\");\r\n");
      out.write("\t\t\t\treturn false;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\treturn true;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfunction logout(){ //로그아웃\r\n");
      out.write("\t\t\tlocation.href=\"");
      out.print( request.getContextPath() );
      out.write("/logout.mem\";\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction goNotice(){ // 공지사항으로 이동\r\n");
      out.write("\t\t\tlocation.href='");
      out.print( request.getContextPath() );
      out.write("/#';\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction gofindId(){ //아이디 찾기로 이동\r\n");
      out.write("\t\t\tlocation.href='");
      out.print( request.getContextPath() );
      out.write("/views/main/findMember/findIdForm.jsp';\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction gofindPwd(){ // 비밀번호 찾기로 이동\r\n");
      out.write("\t\t\tlocation.href='");
      out.print( request.getContextPath() );
      out.write("/views/main/findMember/findPwdForm.jsp';\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction gomemberJoin(){ //회원가입으로 이동\r\n");
      out.write("\t\t\tlocation.href='");
      out.print( request.getContextPath() );
      out.write("/views/main/memberJoinForm.jsp';\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
